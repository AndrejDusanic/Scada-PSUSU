using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace DataConcentrator
{
    using DataConcentrator;

    public delegate void AlarmActivatedEventHandler(object sender, ActivatedAlarm alarmInfo);

    public class ContextClass
    {
        // Skladište svih tagova po ID
        private Dictionary<string, Tag> tags = new Dictionary<string, Tag>();
        // Skladište aktiviranih alarma
        private List<ActivatedAlarm> activatedAlarms = new List<ActivatedAlarm>();

        public IReadOnlyDictionary<string, Tag> Tags => tags;
        public IReadOnlyList<ActivatedAlarm> ActivatedAlarms => activatedAlarms;

        // Event za aktivaciju alarma
        public event AlarmActivatedEventHandler AlarmActivated;

        public bool AddTag(Tag tag)
        {
            // Validacija: ID mora biti jedinstven
            if (tag == null || string.IsNullOrWhiteSpace(tag.Id) || tags.ContainsKey(tag.Id))
                return false;

            // Validacija: units samo za analogne tagove
            if ((tag is DigitalTag) && tag is AnalogTag analogTag && !string.IsNullOrWhiteSpace(analogTag.Units))
                return false;

            tags.Add(tag.Id, tag);
            return true;
        }

        public bool RemoveTag(string id)
        {
            return tags.Remove(id);
        }

        // Dodavanje alarma na AI tag
        public bool AddAlarmToAnalogInput(string tagId, AlarmType alarmType, double limit, string message)
        {
            if (!tags.TryGetValue(tagId, out Tag tag))
                return false;
            if (!(tag is AnalogTag analogTag) || analogTag.Type != TagType.AI)
                return false;
            // Ne dozvoljavamo duplirane alarme sa istim tipom i granicom
            if (analogTag.Alarms.Any(a => a.Type == alarmType && a.Limit == limit))
                return false;
            analogTag.Alarms.Add(new Alarm(alarmType, limit, message));
            return true;
        }

        // Uklanjanje alarma sa AI taga
        public bool RemoveAlarmFromAnalogInput(string tagId, AlarmType alarmType, double limit)
        {
            if (!tags.TryGetValue(tagId, out Tag tag))
                return false;
            if (!(tag is AnalogTag analogTag) || analogTag.Type != TagType.AI)
                return false;
            var alarm = analogTag.Alarms.FirstOrDefault(a => a.Type == alarmType && a.Limit == limit);
            if (alarm == null)
                return false;
            analogTag.Alarms.Remove(alarm);
            return true;
        }

        // PISANJE VREDNOSTI U IZLAZNE TAGOVE
        public bool SetOutputValue(string tagId, double value)
        {
            if (!tags.TryGetValue(tagId, out Tag tag))
                return false;
            if (tag.Type == TagType.DO && tag is DigitalTag)
            {
                tag.Properties["Value"] = value != 0 ? 1 : 0;
                return true;
            }
            if (tag.Type == TagType.AO && tag is AnalogTag analogTag)
            {
                analogTag.InitialValue = value;
                return true;
            }
            return false;
        }

        // UKLJUČIVANJE/ISKLJUČIVANJE SKENIRANJA ULAZNIH TAGOVA
        public bool SetInputScan(string tagId, bool onOff)
        {
            if (!tags.TryGetValue(tagId, out Tag tag))
                return false;
            if (tag.Type == TagType.DI && tag is DigitalTag digitalTag)
            {
                digitalTag.OnOffScan = onOff;
                return true;
            }
            if (tag.Type == TagType.AI && tag is AnalogTag analogTag)
            {
                analogTag.OnOffScan = onOff;
                return true;
            }
            return false;
        }

        // PROVERA I AKTIVACIJA ALARMA NAD AI TAGOM
        public void CheckAndActivateAlarms(string tagId, double currentValue)
        {
            if (!tags.TryGetValue(tagId, out Tag tag))
                return;
            if (!(tag is AnalogTag analogTag) || analogTag.Type != TagType.AI)
                return;
            foreach (var alarm in analogTag.Alarms)
            {
                bool isActive = false;
                if (alarm.Type == AlarmType.HIGH && currentValue > alarm.Limit)
                    isActive = true;
                if (alarm.Type == AlarmType.LOW && currentValue < alarm.Limit)
                    isActive = true;
                if (isActive)
                {
                    var activated = new ActivatedAlarm(alarm.Limit.ToString(), analogTag.Id, alarm.Message, DateTime.Now);
                    activatedAlarms.Add(activated);
                    AlarmActivated?.Invoke(this, activated);
                }
            }
        }

        // --- ČUVANJE/ČITANJE KONFIGURACIJE (stubovi za povezivanje sa bazom) ---
        public void SaveConfigurationToDatabase()
        {
            var config = new
            {
                Tags = tags.Values.ToList(),
                ActivatedAlarms = activatedAlarms.ToList()
            };
            var json = JsonConvert.SerializeObject(config, Formatting.Indented, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All });
            File.WriteAllText("scada_config.json", json);
        }

        public void LoadConfigurationFromDatabase()
        {
            if (!File.Exists("scada_config.json")) return;
            var json = File.ReadAllText("scada_config.json");
            var config = JsonConvert.DeserializeObject<dynamic>(json, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All });
            tags = ((IEnumerable<Tag>)config.Tags).ToDictionary(t => t.Id);
            activatedAlarms = ((IEnumerable<ActivatedAlarm>)config.ActivatedAlarms).ToList();
        }
    }
}
