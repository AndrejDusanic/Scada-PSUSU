using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows;
using DataConcentrator;
using System.Globalization;
using System.Windows.Controls;

namespace ScadaGUI
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private ContextClass context;

        public MainWindow()
        {
            InitializeComponent();
            context = new ContextClass();
            context.AlarmActivated += Context_AlarmActivated;
            LoadData();
        }

        private void Context_AlarmActivated(object sender, ActivatedAlarm alarmInfo)
        {
            Dispatcher.Invoke(() =>
            {
                AlarmMessagesListBox.Items.Add($"[{alarmInfo.Time:HH:mm:ss}] Alarm na tagu {alarmInfo.TagName} ({alarmInfo.AlarmId}): {alarmInfo.Message}");
            });
        }

        private void LoadData()
        {
            // Učitaj tagove
            TagsDataGrid.ItemsSource = context.Tags.Values.ToList();
            // Prikaz svih alarma sa svih AI tagova
            var allAlarms = context.Tags.Values
                .OfType<AnalogTag>()
                .Where(t => t.Type == TagType.AI)
                .SelectMany(t => t.Alarms.Select(a => new { TagId = t.Id, Alarm = a }))
                .ToList();
            AlarmsDataGrid.ItemsSource = allAlarms;
        }

        private void ReportButton_Click(object sender, RoutedEventArgs e)
        {
            // Generiši .txt izveštaj za analogne ulaze u opsegu (high+low)/2 ± 5
            var analogInputs = context.Tags.Values.OfType<AnalogTag>().Where(t => t.Type == TagType.AI).ToList();
            var lines = new List<string>();
            foreach (var tag in analogInputs)
            {
                double sredina = (tag.HighLimit + tag.LowLimit) / 2.0;
                double min = sredina - 5;
                double max = sredina + 5;
                // Pretpostavljamo da postoji lista vrednosti (stub)
                // Ovdje bi trebalo čitati iz baze ili memorije sve vrednosti tog taga
                // Primer: lines.Add($"{tag.Id}: vrednosti u opsegu {min} - {max}");
                lines.Add($"{tag.Id} ({tag.Description}): vrednosti u opsegu {min} - {max}");
            }
            string path = $"SCADA_REPORT_{DateTime.Now:yyyyMMdd_HHmmss}.txt";
            File.WriteAllLines(path, lines);
            MessageBox.Show($"Izveštaj je sačuvan u fajl: {path}", "REPORT");
        }

        private void AddTagButton_Click(object sender, RoutedEventArgs e)
            {
                try
                {
                    var typeStr = (TagTypeComboBox.SelectedItem as ComboBoxItem)?.Content.ToString();
                    if (!Enum.TryParse(typeStr, out TagType tagType))
                    {
                        MessageBox.Show("Izaberi tip taga.");
                        return;
                    }
                    string id = TagIdTextBox.Text.Trim();
                    string desc = TagDescTextBox.Text.Trim();
                    string addr = TagAddrTextBox.Text.Trim();
                    int scanTime = 0;
                    int.TryParse(TagScanTimeTextBox.Text, out scanTime);
                    bool onOffScan = TagOnOffScanCheckBox.IsChecked == true;
                    double low = 0, high = 0, initVal = 0;
                    double.TryParse(TagLowLimitTextBox.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out low);
                    double.TryParse(TagHighLimitTextBox.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out high);
                    double.TryParse(TagInitValueTextBox.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out initVal);
                    string units = TagUnitsTextBox.Text.Trim();

                    Tag tag = null;
                    if (tagType == TagType.DI || tagType == TagType.DO)
                    {
                        tag = new DigitalTag(tagType, id, desc, addr, scanTime, onOffScan);
                    }
                    else if (tagType == TagType.AI || tagType == TagType.AO)
                    {
                        tag = new AnalogTag(tagType, id, desc, addr, low, high, units, scanTime, onOffScan, initVal);
                    }
                    if (tag == null)
                    {
                        MessageBox.Show("Greška pri unosu taga.");
                        return;
                    }
                    if (!context.AddTag(tag))
                    {
                        MessageBox.Show("Tag nije dodat. Proveri ID i podatke.");
                        return;
                    }
                    LoadData();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Greška: {ex.Message}");
                }
            }

            private void AddAlarmButton_Click(object sender, RoutedEventArgs e)
            {
                try
                {
                    if (!(TagsDataGrid.SelectedItem is AnalogTag selectedTag) || selectedTag.Type != TagType.AI)
                    {
                        MessageBox.Show("Selektuj AI tag za alarm.");
                        return;
                    }
                    var alarmTypeStr = (AlarmTypeComboBox.SelectedItem as ComboBoxItem)?.Content.ToString();
                    if (!Enum.TryParse(alarmTypeStr, out AlarmType alarmType))
                    {
                        MessageBox.Show("Izaberi tip alarma.");
                        return;
                    }
                    double limit = 0;
                    double.TryParse(AlarmLimitTextBox.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out limit);
                    string msg = AlarmMsgTextBox.Text.Trim();
                    if (!context.AddAlarmToAnalogInput(selectedTag.Id, alarmType, limit, msg))
                    {
                        MessageBox.Show("Alarm nije dodat. Proveri podatke ili duplikat.");
                        return;
                    }
                    LoadData();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Greška: {ex.Message}");
                }
            }       
}
}
