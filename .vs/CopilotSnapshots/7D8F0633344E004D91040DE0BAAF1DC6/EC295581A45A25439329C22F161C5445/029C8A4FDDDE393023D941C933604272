using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataConcentrator
{
    using DataConcentrator;

    internal class ContextClass
    {
        // Skladište svih tagova po ID
        private Dictionary<string, Tag> tags = new Dictionary<string, Tag>();

        public IReadOnlyDictionary<string, Tag> Tags => tags;

        public bool AddTag(Tag tag)
        {
            // Validacija: ID mora biti jedinstven
            if (tag == null || string.IsNullOrWhiteSpace(tag.Id) || tags.ContainsKey(tag.Id))
                return false;

            // Validacija: units samo za analogne tagove
            if ((tag is DigitalTag) && tag is AnalogTag analogTag && !string.IsNullOrWhiteSpace(analogTag.Units))
                return false;

            tags.Add(tag.Id, tag);
            return true;
        }

        public bool RemoveTag(string id)
        {
            return tags.Remove(id);
        }

        // Dodavanje alarma na AI tag
        public bool AddAlarmToAnalogInput(string tagId, AlarmType alarmType, double limit, string message)
        {
            if (!tags.TryGetValue(tagId, out Tag tag))
                return false;
            if (!(tag is AnalogTag analogTag) || analogTag.Type != TagType.AI)
                return false;
            // Ne dozvoljavamo duplirane alarme sa istim tipom i granicom
            if (analogTag.Alarms.Any(a => a.Type == alarmType && a.Limit == limit))
                return false;
            analogTag.Alarms.Add(new Alarm(alarmType, limit, message));
            return true;
        }

        // Uklanjanje alarma sa AI taga
        public bool RemoveAlarmFromAnalogInput(string tagId, AlarmType alarmType, double limit)
        {
            if (!tags.TryGetValue(tagId, out Tag tag))
                return false;
            if (!(tag is AnalogTag analogTag) || analogTag.Type != TagType.AI)
                return false;
            var alarm = analogTag.Alarms.FirstOrDefault(a => a.Type == alarmType && a.Limit == limit);
            if (alarm == null)
                return false;
            analogTag.Alarms.Remove(alarm);
            return true;
        }
    }
}
